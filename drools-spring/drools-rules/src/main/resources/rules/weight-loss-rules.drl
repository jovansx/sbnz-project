package rules;

import fitness.health.events.AddedFavoriteExercisesForBodyPart;
import fitness.health.events.AddedFavoriteCardioExercises;
import fitness.health.model.User;
import fitness.health.model.Exercise;
import fitness.health.model.enums.ProgressStrategy;
import fitness.health.model.enums.ExerciseType;
import fitness.health.model.enums.BodyPart;
import java.util.List;

rule "Add some exercises - Cardio"
    when
         $u: User(
        (progressStrategy == ProgressStrategy.LOW_BODY_MASS_LOSS ||
         progressStrategy == ProgressStrategy.BODY_MASS_LOSS || progressStrategy == ProgressStrategy.HIGH_BODY_MASS_LOSS),
         $favoriteExercises: favoriteExercises)
         $filteredExercises: List(size >= 2) from accumulate(
            $e: Exercise(type == ExerciseType.CARDIO) from $favoriteExercises, collectList($e)
         )
         not AddedFavoriteCardioExercises(userId == $u.id)
    then
	modify($u) { getExercises().addAll($filteredExercises.subList(0, 2));}
	insert (new AddedFavoriteCardioExercises($u.getId()));
end

rule "Add all exercises - Cardio"
    when
		 $u: User(
		(progressStrategy == ProgressStrategy.LOW_BODY_MASS_LOSS ||
         progressStrategy == ProgressStrategy.BODY_MASS_LOSS || progressStrategy == ProgressStrategy.HIGH_BODY_MASS_LOSS),
		 $favoriteExercises: favoriteExercises)
		 $filteredExercises: List(size < 2 ) from accumulate(
		    $e: Exercise(type == ExerciseType.CARDIO) from $favoriteExercises, collectList($e)
		 )
		 $allExercises: List() from collect(Exercise())
		 not AddedFavoriteCardioExercises(userId == $u.id)
    then
    modify($u) { addExercises($filteredExercises, $allExercises, null, ExerciseType.CARDIO, 2); };
    insert (new AddedFavoriteCardioExercises($u.getId()));
end
