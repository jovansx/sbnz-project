package rules;

import fitness.health.model.User;
import fitness.health.model.Exercise;
import fitness.health.model.enums.ProgressStrategy;
import fitness.health.model.enums.ExerciseType;
import fitness.health.model.enums.BodyPart;
import java.util.List;

rule "Add some exercises - Back"
    when
         $u: User(
        (progressStrategy == ProgressStrategy.LOW_BODY_MASS_INCREASE ||
         progressStrategy == ProgressStrategy.BODY_MASS_INCREASE),
         $exercises: favoriteExercises,
         $btn: numberOfTrainingPerWeek)
        $filteredExercises: List(size >= $btn ) from accumulate(
            $e: Exercise(type == ExerciseType.STRENGTH, BodyPart.BACK memberOf activeBodyParts) from $exercises, collectList($e)
        )
    then
    	List<Exercise> allFavorites = $u.getFavoriteExerciesForBodyPartWithType(BodyPart.BACK, ExerciseType.STRENGTH);
    	$u.getExercises().addAll(allFavorites.subList(0, $u.getNumberOfTrainingPerWeek()));
        update($u);
end

rule "Add all exercises - Back"
    when
         $u: User(
        (progressStrategy == ProgressStrategy.LOW_BODY_MASS_INCREASE ||
         progressStrategy == ProgressStrategy.BODY_MASS_INCREASE),
         $exercises: favoriteExercises,
         $btn: numberOfTrainingPerWeek)
        $filteredExercises: List(size < $btn ) from accumulate(
            $e: Exercise(type == ExerciseType.STRENGTH, BodyPart.BACK memberOf activeBodyParts) from $exercises, collectList($e)
        )
    then
    	List<Exercise> allFavorites = $u.getFavoriteExerciesForBodyPartWithType(BodyPart.BACK, ExerciseType.STRENGTH);
    	$u.getExercises().addAll(allFavorites);
    	
        update($u);
end

